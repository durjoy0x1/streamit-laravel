/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./Modules/Frontend/Resources/assets/js/auth.js":
/*!******************************************************!*\
  !*** ./Modules/Frontend/Resources/assets/js/auth.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nvar togglePassword = document.querySelector('#togglePassword');\nvar password = document.querySelector('#password');\nif (togglePassword) {\n  togglePassword.addEventListener('click', function () {\n    var type = password.getAttribute('type') === 'password' ? 'text' : 'password';\n    password.setAttribute('type', type);\n    this.classList.toggle('fa-eye-slash');\n  });\n}\nvar toggleConfirmPassword = document.querySelector('#toggleConfirmPassword');\nvar confirm_password = document.querySelector('#confirm_password');\nif (toggleConfirmPassword) {\n  toggleConfirmPassword.addEventListener('click', function () {\n    var type_confirm = confirm_password.getAttribute('type') === 'password' ? 'text' : 'password';\n    confirm_password.setAttribute('type', type_confirm);\n    this.classList.toggle('fa-eye-slash');\n  });\n}\nvar registerForm = document.querySelector('#registerForm');\nvar registerButton = document.querySelector('#register-button');\nvar errorMessage = document.querySelector('#error_message');\nvar baseUrl = document.querySelector('meta[name=\"base-url\"]').getAttribute('content');\nif (registerForm) {\n  registerForm.addEventListener('submit', /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(e) {\n      var isValid, formData, response, data, errorMessages, _formData, _response, _data;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n            isValid = validateRegisterForm();\n            if (isValid) {\n              _context.next = 4;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 4:\n            toggleRegisterButton(true, registerButton);\n            errorMessage.textContent = '';\n            _context.prev = 6;\n            formData = new FormData(this);\n            _context.next = 10;\n            return fetch(\"\".concat(baseUrl, \"/api/register?is_ajax=1\"), {\n              method: 'POST',\n              headers: {\n                'X-CSRF-TOKEN': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n              },\n              body: formData\n            });\n          case 10:\n            response = _context.sent;\n            _context.next = 13;\n            return response.json();\n          case 13:\n            data = _context.sent;\n            if (response.ok) {\n              _context.next = 17;\n              break;\n            }\n            if (data.errors) {\n              errorMessages = Object.values(data.errors).flat();\n              errorMessage.textContent = errorMessages[0];\n            } else if (data.message) {\n              errorMessage.textContent = data.message;\n            } else {\n              errorMessage.textContent = 'An error occurred during registration';\n            }\n            return _context.abrupt(\"return\");\n          case 17:\n            if (!(data.status === true)) {\n              _context.next = 34;\n              break;\n            }\n            _context.prev = 18;\n            _formData = new FormData(this);\n            _context.next = 22;\n            return fetch(\"\".concat(baseUrl, \"/api/login?is_ajax=1\"), {\n              method: 'POST',\n              headers: {\n                'X-CSRF-TOKEN': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n              },\n              body: _formData\n            });\n          case 22:\n            _response = _context.sent;\n            _context.next = 25;\n            return _response.json();\n          case 25:\n            _data = _context.sent;\n            if (_data.status == true) {\n              window.location.href = \"\".concat(baseUrl);\n            }\n            _context.next = 32;\n            break;\n          case 29:\n            _context.prev = 29;\n            _context.t0 = _context[\"catch\"](18);\n            if (_context.t0.message !== 'Validation Error') {}\n          case 32:\n            _context.next = 35;\n            break;\n          case 34:\n            errorMessage.textContent = data.message || 'Registration failed';\n          case 35:\n            _context.next = 41;\n            break;\n          case 37:\n            _context.prev = 37;\n            _context.t1 = _context[\"catch\"](6);\n            // Only show generic error for network/system errors\n            console.error('Registration error:', _context.t1);\n            errorMessage.textContent = 'A system error occurred. Please try again later.';\n          case 41:\n            _context.prev = 41;\n            toggleRegisterButton(false, registerButton);\n            return _context.finish(41);\n          case 44:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, this, [[6, 37, 41, 44], [18, 29]]);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n}\nfunction toggleRegisterButton(isSubmitting, button) {\n  var registrationText = button.getAttribute('data-login-text') || 'Sign Up';\n  button.textContent = isSubmitting ? 'Sign Up...' : registrationText;\n  button.disabled = isSubmitting;\n}\nfunction validateRegisterForm() {\n  var isValid = true;\n  var firstName = registerForm.querySelector('input[name=\"first_name\"]');\n  var lastName = registerForm.querySelector('input[name=\"last_name\"]');\n  var email = registerForm.querySelector('input[name=\"email\"]');\n  var password = registerForm.querySelector('input[name=\"password\"]');\n  var confirmPassword = registerForm.querySelector('input[name=\"confirm_password\"]');\n  if (!firstName.value.trim()) {\n    showValidationError(firstName, 'First Name field is required.');\n    isValid = false;\n  } else {\n    clearValidationError(firstName);\n  }\n  if (!lastName.value.trim()) {\n    showValidationError(lastName, 'Last Name field is required.');\n    isValid = false;\n  } else {\n    clearValidationError(lastName);\n  }\n  if (email && email.required) {\n    if (email.value.trim() === '') {\n      showValidationError(email, 'Email field is required.');\n      isValid = false;\n    } else if (!validateEmail(email.value)) {\n      showValidationError(email, 'Enter a valid Email Address.');\n      isValid = false;\n    } else {\n      clearValidationError(email);\n    }\n  }\n  if (!password.value.trim()) {\n    showValidationError(password, 'Password field is required.');\n    isValid = false;\n  } else if (password.value.length < 6) {\n    showValidationError(password, 'Password must be at least 6 characters long.');\n    isValid = false;\n  } else {\n    clearValidationError(password);\n  }\n  if (password.value.length > 6 && password.value !== confirmPassword.value) {\n    showValidationError(confirmPassword, 'Passwords and confirm password do not match.');\n    isValid = false;\n  } else {\n    clearValidationError(confirmPassword);\n  }\n  return isValid;\n}\nfunction addInputListeners() {\n  var formFields = [registerForm.querySelector('input[name=\"first_name\"]'), registerForm.querySelector('input[name=\"last_name\"]'), registerForm.querySelector('input[name=\"email\"]'), registerForm.querySelector('input[name=\"password\"]'), registerForm.querySelector('input[name=\"confirm_password\"]')];\n  formFields.forEach(function (field) {\n    if (field) {\n      field.addEventListener('input', function () {\n        clearValidationError(field);\n        // Special handling for confirm password\n        if (field.name === 'confirm_password' || field.name === 'password') {\n          var _password = registerForm.querySelector('input[name=\"password\"]');\n          var confirmPassword = registerForm.querySelector('input[name=\"confirm_password\"]');\n          if (_password.value && confirmPassword.value) {\n            if (_password.value === confirmPassword.value) {\n              clearValidationError(confirmPassword);\n            }\n          }\n        }\n      });\n    }\n  });\n}\nif (registerForm) {\n  addInputListeners();\n}\nvar loginForm = document.querySelector('#login-form');\nif (loginForm) {\n  var loginButton = document.querySelector('#login-button');\n  var loginError = document.querySelector('#login_error_message');\n  loginForm.addEventListener('submit', /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e) {\n      var isValid, formData, response, data;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            e.preventDefault();\n            isValid = validateloginForm();\n            if (isValid) {\n              _context2.next = 4;\n              break;\n            }\n            return _context2.abrupt(\"return\");\n          case 4:\n            toggleLoginButton(true, loginButton);\n            loginError.textContent = '';\n            _context2.prev = 6;\n            formData = new FormData(this);\n            _context2.next = 10;\n            return fetch(\"\".concat(baseUrl, \"/api/login?is_ajax=1\"), {\n              method: 'POST',\n              headers: {\n                'X-CSRF-TOKEN': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n              },\n              body: formData\n            });\n          case 10:\n            response = _context2.sent;\n            _context2.next = 13;\n            return response.json();\n          case 13:\n            data = _context2.sent;\n            if (!response.ok) {\n              handleValidationErrors(data.errors);\n            }\n            if (!(data.status === true)) {\n              _context2.next = 22;\n              break;\n            }\n            if (!data.device_limit_reached) {\n              _context2.next = 19;\n              break;\n            }\n            loginError.textContent = \"Your device limit has been reached.\";\n            return _context2.abrupt(\"return\");\n          case 19:\n            window.location.href = \"\".concat(baseUrl);\n            _context2.next = 23;\n            break;\n          case 22:\n            loginError.textContent = data.message;\n          case 23:\n            _context2.next = 28;\n            break;\n          case 25:\n            _context2.prev = 25;\n            _context2.t0 = _context2[\"catch\"](6);\n            if (_context2.t0.message !== 'Validation Error') {\n              loginError.textContent = 'Your device limit has been reached.';\n            }\n          case 28:\n            _context2.prev = 28;\n            toggleLoginButton(false, loginButton);\n            return _context2.finish(28);\n          case 31:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, this, [[6, 25, 28, 31]]);\n    }));\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n}\nfunction validateloginForm() {\n  var isValid = true;\n  var emailField = loginForm.querySelector('input[name=\"email\"]');\n  var passwordField = loginForm.querySelector('input[name=\"password\"]');\n  if (emailField && emailField.required) {\n    if (emailField.value.trim() === '') {\n      showValidationError(emailField, 'Email field is required.');\n      isValid = false;\n    } else if (!validateEmail(emailField.value)) {\n      showValidationError(emailField, 'Enter a valid Email Address.');\n      isValid = false;\n    } else {\n      clearValidationError(emailField);\n    }\n  }\n  if (passwordField && passwordField.value.trim() === '') {\n    passwordField.classList.add('is-invalid');\n    isValid = false;\n  } else {\n    passwordField.classList.remove('is-invalid');\n  }\n  return isValid;\n}\nfunction toggleLoginButton(isSubmitting, button) {\n  var loginText = button.getAttribute('data-login-text') || 'Sign In';\n  button.textContent = isSubmitting ? 'Sign In...' : loginText;\n  button.disabled = isSubmitting;\n}\nfunction validateEmail(email) {\n  var re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return re.test(email);\n}\nfunction showValidationError(input, message) {\n  var container = input.closest('.input-group');\n  var errorFeedback = container.querySelector('.invalid-feedback');\n  if (errorFeedback) {\n    errorFeedback.textContent = message;\n    input.classList.add('is-invalid');\n  }\n}\nfunction clearValidationError(input) {\n  var container = input.closest('.input-group');\n  var errorFeedback = container.querySelector('.invalid-feedback');\n  if (errorFeedback) {\n    errorFeedback.textContent = '';\n    input.classList.remove('is-invalid');\n  }\n}\nvar ForgetpasswordForm = document.querySelector('#forgetpassword-form');\nif (ForgetpasswordForm) {\n  var forgetpasswordButton = document.querySelector('#forget_password_btn');\n  var ForgetpasswordError = document.querySelector('#forgetpassword_error_message');\n  var Forgetpasswordmessage = document.querySelector('#forget_password_msg');\n  ForgetpasswordForm.addEventListener('submit', /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(e) {\n      var isValid, formData, response, data;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            e.preventDefault();\n            isValid = validateforgetpasswordForm(); // Manually validate the form\n            if (isValid) {\n              _context3.next = 4;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 4:\n            toggleButton(true, forgetpasswordButton, 'Sending...');\n            ForgetpasswordError.textContent = '';\n            _context3.prev = 6;\n            formData = new FormData(this);\n            _context3.next = 10;\n            return fetch(\"\".concat(baseUrl, \"/api/forgot-password?is_ajax=1\"), {\n              method: 'post',\n              headers: {\n                'X-CSRF-TOKEN': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n              },\n              body: formData\n            });\n          case 10:\n            response = _context3.sent;\n            _context3.next = 13;\n            return response.json();\n          case 13:\n            data = _context3.sent;\n            if (data.status == true) {\n              Forgetpasswordmessage.classList.remove('d-none');\n            } else {\n              ForgetpasswordError.textContent = data.message;\n              toggleButton(false, forgetpasswordButton, 'Submit');\n            }\n            _context3.next = 20;\n            break;\n          case 17:\n            _context3.prev = 17;\n            _context3.t0 = _context3[\"catch\"](6);\n            if (_context3.t0.message !== 'Validation Error') {}\n          case 20:\n            _context3.prev = 20;\n            toggleButton(false, forgetpasswordButton, 'Submit');\n            return _context3.finish(20);\n          case 23:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3, this, [[6, 17, 20, 23]]);\n    }));\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n}\nfunction validateforgetpasswordForm() {\n  var isValid = true;\n  var emailField = ForgetpasswordForm.querySelector('input[name=\"email\"]');\n  if (emailField && emailField.required) {\n    if (emailField.value.trim() === '') {\n      showValidationError(emailField, 'Email field is required.');\n      isValid = false;\n    } else if (!validateEmail(emailField.value)) {\n      showValidationError(emailField, 'Enter a valid Email Address.');\n      isValid = false;\n    } else {\n      clearValidationError(emailField);\n    }\n  }\n  return isValid;\n}\nfunction toggleButton(isSubmitting, button) {\n  var btntext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Loding...';\n  var Text = button.getAttribute('data-login-text') || 'Submit';\n  button.textContent = isSubmitting ? btntext : Text;\n  button.disabled = isSubmitting;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Modules/Frontend/Resources/assets/js/auth.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./Modules/Frontend/Resources/assets/js/auth.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;